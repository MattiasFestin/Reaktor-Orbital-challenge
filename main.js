var epsilon = 0.01;
//[TODO] - Inline and unrole optimize for 3d case.
var Vec3 = (function () {
    function Vec3(arr) {
        /**
         * Assertions
         */
        if (!Array.isArray(arr)) {
            throw new TypeError('Invalid construtor parameter type. Array expected.');
        }
        if (arr.length !== 3) {
            throw new TypeError('Invalid construtor array length. Length 3 expected.');
        }
        this.value = new Float32Array(arr);
    }
    /**
     * Getters for 3d coordinates
     */
    Vec3.prototype.getX = function () {
        return this.value[0];
    };
    ;
    Vec3.prototype.getY = function () {
        return this.value[1];
    };
    ;
    Vec3.prototype.getZ = function () {
        return this.value[2];
    };
    ;
    Vec3.prototype.add = function (w) {
        var v = this;
        return new Vec3([
            this.getX() + w.getX(),
            this.getY() + w.getY(),
            this.getZ() + w.getZ(),
        ]);
    };
    Vec3.prototype.neg = function () {
        var v = this;
        return new Vec3([
            -this.getX(),
            -this.getY(),
            -this.getZ()
        ]);
    };
    Vec3.prototype.sub = function (w) {
        var v = this;
        return new Vec3([
            v.getX() - w.getX(),
            v.getY() - w.getY(),
            v.getZ() - w.getZ()
        ]);
    };
    Vec3.prototype.scale = function (a) {
        var v = this;
        return new Vec3([
            a * v.getX(),
            a * v.getY(),
            a * v.getZ()
        ]);
    };
    Vec3.prototype.dot = function (w) {
        var v = this;
        return v.getX() * w.getX() + v.getY() * w.getY() + v.getZ() * w.getZ();
    };
    Vec3.prototype.len = function () {
        return Math.sqrt(this.dot(this));
    };
    Vec3.prototype.norm = function () {
        var len = this.len();
        return len === 0 ? this : this.scale(1 / len);
    };
    Vec3.prototype.cross = function (w) {
        var v = this;
        return new Vec3([
            v.getY() * w.getZ() - v.getZ() * w.getY(),
            v.getZ() * w.getX() - v.getX() * w.getZ(),
            v.getX() * w.getY() - v.getY() * w.getX()
        ]);
    };
    Vec3.prototype.distance = function (w) {
        var v = this;
        return Math.sqrt(Math.pow(v.getX() - w.getX(), 2) +
            Math.pow(v.getY() - w.getY(), 2) +
            Math.pow(v.getZ() - w.getZ(), 2));
    };
    Vec3.prototype.toString = function () {
        return this.getX() + "," + this.getY() + "," + this.getZ();
    };
    return Vec3;
})();
var Line = (function () {
    function Line(o, d) {
        this.o = o;
        this.d = d.norm();
    }
    Line.prototype.getPoint = function (distance) {
        return this.o.add(this.d.scale(distance));
    };
    return Line;
})();
var Sphere = (function () {
    function Sphere(o, r) {
        this.o = o;
        this.r = r;
    }
    Sphere.prototype.pointOnSphere = function (p) {
        return Math.abs(p.distance(this.o) - this.r) < epsilon;
    };
    Sphere.prototype.normal = function (p) {
        return new Vec3([
            (p.getX() - this.o.getX()) / this.r,
            (p.getY() - this.o.getY()) / this.r,
            (p.getZ() - this.o.getZ()) / this.r
        ]);
    };
    Sphere.prototype.intersect = function (l) {
        var q = l.d.dot(l.o.sub(this.o)), t = Math.pow(q, 2) - Math.pow(l.o.distance(this.o), 2) + Math.pow(this.r, 2);
        if (t < 0 || (typeof t === 'number' && isNaN(t))) {
            return [];
        }
        else if (t === 0) {
            var x = l.getPoint(-q);
            if (!this.pointOnSphere(x)) {
                throw new Error("Solution points " + x + " not on sphere.");
            }
            return [x]; //One solution (Two points at same postion that tangent the sphere)
        }
        else {
            t = Math.sqrt(t);
            var x0 = l.getPoint(-q - t), x1 = l.getPoint(-q + t);
            if (!this.pointOnSphere(x0)) {
                throw new Error("Solution " + x0 + " point not on sphere.");
            }
            if (!this.pointOnSphere(x1)) {
                throw new Error("Solution " + x1 + " point not on sphere.");
            }
            return [x0, x1]; //Two unique solutions   
        }
    };
    return Sphere;
})();
var PolarCoordinate = (function () {
    function PolarCoordinate(lat, lon, alt) {
        this.lat = Math.PI * lat / 180;
        this.lon = Math.PI * lon / 180;
        this.alt = alt;
    }
    PolarCoordinate.prototype.convert = function () {
        return new Vec3([
            this.alt * Math.cos(this.lat) * Math.cos(this.lon),
            this.alt * Math.cos(this.lat) * Math.sin(this.lon),
            this.alt * Math.sin(this.lat)
        ]);
    };
    return PolarCoordinate;
})();
var RountingPointPairs = (function () {
    function RountingPointPairs(source, target) {
        this.source = source;
        this.target = target;
        this.distance = this.source.position.distance(this.target.position);
    }
    return RountingPointPairs;
})();
var RouteingPoint = (function () {
    function RouteingPoint(name, polarCoord) {
        this.name = name;
        this.position = polarCoord.convert();
    }
    return RouteingPoint;
})();
var Router = (function () {
    function Router(routes) {
        var _this = this;
        this.earth = new Sphere(new Vec3([0, 0, 0]), 6371);
        this.routes = routes
            .map(function (s) {
            s.availiableRoutingPoints = s.availiableRoutingPoints || [];
            if (['start', 'end'].indexOf(s.name) === -1) {
                s.availiableRoutingPoints = routes
                    .filter(function (q) {
                    return q !== s &&
                        ['start', 'end'].indexOf(q.name) === -1 &&
                        _this.earth.intersect(new Line(s.position, q.position.sub(s.position))).length === 0; //Is not self and does not intersect earth 
                })
                    .map(function (x) { return new RountingPointPairs(s, x); })
                    .filter(function (x) { return s.availiableRoutingPoints.indexOf(x) === -1; })
                    .sort(function (a, b) { return a.distance - b.distance; });
            }
            else {
                //Start and end points will intersect below (behind?) the point
                // We must check the surface normal the direction if it is infront of the point
                var surfaceNormal = _this.earth.normal(s.position);
                s.availiableRoutingPoints = s.availiableRoutingPoints.concat(routes
                    .filter(function (q) {
                    var dot = q.position.sub(s.position).norm().dot(surfaceNormal);
                    return q !== s &&
                        dot > 0;
                })
                    .map(function (x) { return new RountingPointPairs(s, x); })
                    .filter(function (x) { return s.availiableRoutingPoints.indexOf(x) === -1; })
                    .sort(function (a, b) { return a.distance - b.distance; }));
                //We want symetric relations
                s.availiableRoutingPoints.forEach(function (q) {
                    q.target.availiableRoutingPoints = q.target.availiableRoutingPoints || [];
                    if (q.target.availiableRoutingPoints.every(function (r) { return r.target !== q.source; })) {
                        q.target.availiableRoutingPoints.push(new RountingPointPairs(q.target, q.source));
                    }
                });
            }
            return s;
        });
    }
    Router.prototype.route = function (start, end) {
        var len = this.routes.length;
        var path = [];
        var pathPos = [];
        var distance = 0;
        var recursiveDecent = function (node, finish, answer, visited) {
            if (visited === void 0) { visited = []; }
            var availiableRoutingPoints = node.availiableRoutingPoints.filter(function (x) { return visited.indexOf(x) === -1; });
            if (availiableRoutingPoints.length === 0 || visited.length > 6) {
                return {
                    distance: Infinity,
                    path: ['NO_SOLUTION'],
                    pathPos: []
                };
            }
            else if (availiableRoutingPoints.map(function (x) { return x.target; }).indexOf(finish) > -1) {
                //[We are done]
                return {
                    distance: answer.distance,
                    path: answer.path.concat([node.name, finish.name]),
                    pathPos: answer.pathPos.concat([node.position, finish.position])
                };
            }
            else {
                var paths = availiableRoutingPoints
                    .filter(function (n) { return answer.path.indexOf(n.source.name) === -1; })
                    .map(function (n) { return recursiveDecent(n.target, finish, {
                    distance: answer.distance + n.distance,
                    path: answer.path.concat([n.source.name]),
                    pathPos: answer.pathPos.concat([n.source.position])
                }, visited.concat([n])); })
                    .filter(function (n) { return n && n.distance !== Infinity; });
                var best = paths.sort(function (a, b) { return a.distance - b.distance; })[0];
                return best;
            }
        };
        var answer = {
            path: path,
            pathPos: pathPos,
            distance: distance
        };
        answer = recursiveDecent(start, end, answer, []) || {
            path: path,
            pathPos: pathPos,
            distance: distance
        };
        console.log('answer:', answer);
        return answer;
    };
    Router.prototype.minimum = function (arr) {
        var minIndex = 0, minValue = arr[0];
        arr.forEach(function (x, i) {
            if (arr[i] < minValue) {
                minIndex = i;
                minValue = arr[i];
            }
        });
        return {
            index: minIndex,
            value: minValue
        };
    };
    return Router;
})();
//Helper function to parse data
var parse = function parseFn(text) {
    var result;
    var rows = text
        .split(/[\r\n]+/);
    var routeingPoints = rows
        .filter(function (x, i) { return i > 0 && i < rows.length - 1; })
        .map(function (row) {
        var values = row.split(',');
        return new RouteingPoint(values[0], new PolarCoordinate(+values[1], +values[2], +values[3] + 6371));
    });
    var earthPoints = rows[rows.length - 1].split(',');
    //[NOTE] - Add one to earth radious for altidude, to prevent to tangent intersection with sphere
    var start = new RouteingPoint('start', new PolarCoordinate(+earthPoints[1], +earthPoints[2], 6371));
    var end = new RouteingPoint('end', new PolarCoordinate(+earthPoints[3], +earthPoints[4], 6371));
    //Add start and end to routeingPoints
    routeingPoints.unshift(start);
    routeingPoints.push(end);
    var router = new Router(routeingPoints);
    var answer = router.route(start, end);
    var retVal = {
        seed: rows[0],
        routeingPoints: routeingPoints.map(function (x) {
            return {
                name: x.name,
                position: x.position,
                availiableRoutingPoints: x.availiableRoutingPoints.map(function (y) {
                    return {
                        name: y.target.name,
                        position: y.target.position
                    };
                })
            };
        }),
        start: {
            name: start.name,
            position: start.position,
            availiableRoutingPoints: start.availiableRoutingPoints.map(function (y) {
                return {
                    name: y.target.name,
                    position: y.target.position
                };
            })
        },
        end: {
            name: end.name,
            position: end.position,
            availiableRoutingPoints: end.availiableRoutingPoints.map(function (y) {
                return {
                    name: y.target.name,
                    position: y.target.position
                };
            })
        },
        answer: answer
    };
    console.log('result:', retVal);
    return retVal;
};
window.result = window.fetch('https://space-fast-track.herokuapp.com/generate')
    .then(function (x) { return x.text(); })
    .then(function (x) { return parse(x); });
//# sourceMappingURL=data:application/json;base64,